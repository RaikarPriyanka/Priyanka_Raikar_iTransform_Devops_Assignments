Assignment

NOTE: Do not forget to see manual page using "--help" option in command when searching for options/commands for a particular task.

1. Install Docker, either on your native OS or on a VM. Make sure it runs. type "docker -v" to check if it's installed.
   try below commands for help
	docker --help  ---> This command shows all available options and commands to work with images and containers
	docker images --help ---> This command shows all the avaialble options and commands to work with docker images
	docker ps --help ---> This command shows all the avaialble options and commands to work with docker containers
Output--> Docker version 20.10.6, build 370c289

2. Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub
--> docker pull nginx
Output--> Using default tag: latest
	latest: Pulling from library/nginx
	69692152171a: Pull complete                                         
        49f7d34d62c1: Pull complete   
        5f97dc5d71ab: Pull complete                                            
	cfcd0711b93a: Pull complete                                            
	be6172d7651b: Pull complete                                            
	de9813870342: Pull complete                                            
	Digest: sha256:df13abe416e37eb3db4722840dd479b00ba193ac6606e7902331dcea50f4f1f2
	Status: Downloaded newer image for nginx:latest
	docker.io/library/nginx:latest

3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.
--> docker images
Output--> REPOSITORY    TAG       IMAGE ID       CREATED        SIZE
	  nginx         latest    f0b8a9a54136   4 days ago     133MB
	  <none>        <none>    ca6a3a7ac1ba   6 days ago     101MB
	  ubuntu        latest    7e0aa2d69a15   3 weeks ago    72.7MB
	  hello-world   latest    d1165f221234   2 months ago   13.3kB

4. Find out the "Full" ImageId of the image that you pulled and write it below.
--> docker images --no-trunc
Output--> REPOSITORY    TAG       IMAGE ID                                                                  CREATED        SIZE
	  nginx         latest    sha256:f0b8a9a541369db503ff3b9d4fa6de561b300f7363920c2bff4577c6c24c5cf6   4 days ago     133MB

5. Create a container of your image 
--> docker run nginx
Output--> /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
	  /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
	  /docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
	  10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf
	  10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
	  /docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
	  /docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh
	  /docker-entrypoint.sh: Configuration complete; ready for start up

6. List all the running containers
--> docker ps
Output--> CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES
	  bf58da6ccd80   nginx     "/docker-entrypoint.…"   50 minutes ago   Up 50 minutes   80/tcp    recursing_gates

7. List all the running and stopped containers
--> docker ps -a
Output--> CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS                    PORTS     NAMES
	  bf58da6ccd80   nginx          "/docker-entrypoint.…"   52 minutes ago   Up 52 minutes             80/tcp    recursing_gates
	  98d52c68213a   ca6a3a7ac1ba   "echo 'Hello World..…"   6 days ago       Exited (0) 6 days ago               cranky_rhodes
	  7136255da340   hello-world    "/hello"                 6 days ago       Exited (0) 6 days ago               cranky_wescoff
	  3b7080e8f235   ubuntu         "bash"                   6 days ago       Exited (255) 5 days ago             myUbuntuEx
	  ac059aeaa89b   hello-world    "/hello"                 6 days ago       Exited (0) 6 days ago               adoring_hoover

8. Find out the "Full" containerId of the container and write it below.
--> docker images --no-trunc
Output--> CONTAINER ID                                                       IMAGE     COMMAND                                          CREATED          STATUS          PORTS     NAMES
	  bf58da6ccd80437b7c3c6e8b3e651abfb8257b68307d9aaf2bb6c7052c8a187d   nginx     "/docker-entrypoint.sh nginx -g 'daemon off;'"   57 minutes ago   Up 57 minutes   80/tcp    recursing_gates

9. Find out how many image layers are used to build this image.
--> docker history nginx
Output--> IMAGE          CREATED      CREATED BY                                      SIZE      COMMENT
	  f0b8a9a54136   4 days ago   /bin/sh -c #(nop)  CMD ["nginx" "-g" "daemon…   0B
	  <missing>      4 days ago   /bin/sh -c #(nop)  STOPSIGNAL SIGQUIT           0B
	  <missing>      4 days ago   /bin/sh -c #(nop)  EXPOSE 80                    0B
	  <missing>      4 days ago   /bin/sh -c #(nop)  ENTRYPOINT ["/docker-entr…   0B
	  <missing>      4 days ago   /bin/sh -c #(nop) COPY file:09a214a3e07c919a…   4.61kB
	  <missing>      4 days ago   /bin/sh -c #(nop) COPY file:0fd5fca330dcd6a7…   1.04kB
	  <missing>      4 days ago   /bin/sh -c #(nop) COPY file:0b866ff3fc1ef5b0…   1.96kB
	  <missing>      4 days ago   /bin/sh -c #(nop) COPY file:65504f71f5855ca0…   1.2kB

10. Get the Apache Tomcat 7 server image from the docker hub.
--> docker pull tomcat:7
Output--> 7: Pulling from library/tomcat
	     d960726af2be: Pull complete   
	     e8d62473a22d: Pull complete                                                                                                                                             
	     8962bc0fad55: Pull complete                                                                                                                                                                                                                                                                                          
	     da20b77f10ac: Pull complete                                                                                                                                                                                                                                                                                           
	     e8d62473a22d: Pull complete                                                                                                                                                                                                                                                                                                                                                                                                                                       
	     da20b77f10ac: Pull complete
	     Status: Downloaded newer image for tomcat:7
	     docker.io/library/tomcat:7

11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.
--> docker run tomcat
Output--> INFO: Starting Servlet Engine: Apache Tomcat/7.0.109
	  May 17, 2021 6:40:17 AM org.apache.coyote.AbstractProtocol start
	  INFO: Starting ProtocolHandler ["http-apr-8080"]
	  May 17, 2021 6:40:17 AM org.apache.catalina.startup.Catalina start
	  INFO: Server startup in 125 ms

12. Find out what is the IP Address of the Apache Tomcat Container that it is running on
--> docker inspect --format '{{.NetworkSettings.IPAddress}}' 312a788acc14
Output-->  '172.17.0.3'

13. Which Port it is using?
--> docker inspect --format '{{.NetworkSettings.Ports}}' 312a788acc14
Output--> 'map[8080/tcp:[]]'

14. Try to access the Tomcat's home page from your machine/vm.
--> use command docker run -it --rm 8080:8080 tomcat:7.0.90 tomcat server will start and we can access the Tomcat's home page on our browser.

15. What is the disk size of Apache Tomcat image?
--> docker ps -s
Output--> CONTAINER ID   IMAGE      COMMAND                  CREATED         STATUS         PORTS      NAMES             SIZE
	  13ac372a6419   tomcat:7   "catalina.sh run"        4 minutes ago   Up 4 minutes   8080/tcp   boring_beaver     36.5kB (virtual 533MB)

16. Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?
--> docker inspect --format '{{.Config.Env}}' 312a788acc14
Output--> '[PATH=/usr/local/tomcat/bin:/usr/local/openjdk-8/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin 
	   JAVA_HOME=/usr/local/openjdk-8 
	   LANG=C.UTF-8 JAVA_VERSION=8u292 
	   CATALINA_HOME=/usr/local/tomcat 
	   TOMCAT_NATIVE_LIBDIR=/usr/local/tomcat/native-jni-lib 
	   LD_LIBRARY_PATH=/usr/local/tomcat/native-jni-lib 
	   GPG_KEYS=05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23 
	   TOMCAT_MAJOR=7 
	   TOMCAT_VERSION=7.0.109 
	   TOMCAT_SHA512=612e830913bf1401bc9540e2273e465b0ee7ef63750a9969a80f1e9da9edb4888aa621fcc6fa5ba23cff94a40e91eb97e3f969b8064dabd49b2d0ea29e59b57e]'

17. Find out which port is exposed for tomcat?
--> docker inspect --format '{{.Config.ExposedPorts}}' 312a788acc14
Output--> 'map[8080/tcp:{}]'

18. Run multiple conntainers of tomcat on different port and access it's home page.
--> docker run -d -p 8282:8080 tomcat:7
--> docker run -d -p 8484:8080 tomcat:7

19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.
--> docker pull ubuntu:16.04
Output--> 16.04: Pulling from library/ubuntu
	  92473f7ef455: Pull complete                                                                                                                                             
	  fb52bde70123: Pull complete                                                                                                                                             
	  64788f86be3f: Pull complete                                                                                                                                             
	  33f6d5f2e001: Pull complete                                                                                                                                             
	  Digest: sha256:eed7e1076bbc1f342c4474c718e5438af4784f59a4e88ad687dbb98483b59ee4
	  Status: Downloaded newer image for ubuntu:16.04
	  docker.io/library/ubuntu:16.04

--> docker pull ubuntu:14.04
Output--> 14.04: Pulling from library/ubuntu
	  2e6e20c8e2e6: Pull complete                                                                                                                                             
	  0551a797c01d: Pull complete                                                                                                                                             
	  512123a864da: Pull complete                                                                                                                                             
	  Digest: sha256:4a8a6fa8810a3e01352981b35165b0b28403fe2a4e2535e315b23b4a69cd130a
	  Status: Downloaded newer image for ubuntu:14.04
	  docker.io/library/ubuntu:14.04

20. Run the container of ubuntu in attached mode.
--> docker container attach 27450437a151

21. Run the container of another ubuntu in detached mode.
-->docker container run -d ubuntu:16.04

22. Check how many ubuntu containers are running and stopped
--> docker ps -a
Output--> CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS                      PORTS     NAMES
	  e8d5f2b2eac6   ubuntu:16.04   "/bin/bash"              16 minutes ago   Exited (0) 16 minutes ago             inspiring_shaw
	  312a788acc14   e614000ce544   "catalina.sh run"        5 hours ago      Exited (143) 3 hours ago              dazzling_franklin
	  bf58da6ccd80   nginx          "/docker-entrypoint.…"   6 hours ago      Up 6 hours                  80/tcp    recursing_gates
	  7136255da340   hello-world    "/hello"                 6 days ago       Exited (0) 6 days ago                 cranky_wescoff

23. Is the tomcat container running? If no, start one.
--> docker run tomcat:7
Output--> CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS                      PORTS      NAMES
	  0c73b2e15701   tomcat:7       "catalina.sh run"        29 seconds ago   Up 24 seconds               8080/tcp   crazy_torvalds
	  e8d5f2b2eac6   ubuntu:16.04   "/bin/bash"              20 minutes ago   Exited (0) 20 minutes ago              inspiring_shaw
	  bf58da6ccd80   nginx          "/docker-entrypoint.…"   7 hours ago      Up 7 hours                  80/tcp     recursing_gates

24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log)
--> docker logs 0c73b2e15701

25. Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.
--> docker ps -a //to check the ubuntu container is running.
--> docker attach 9e0125895039
Output--> root@9e0125895039:/# ls
	  bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
	  root@9e0125895039:/# exit
	  exit

26. Login as root user in ubuntu container
--> docker exec -it 9e0125895039 bash
Output--> root@9e0125895039:/# whoami
	  root

27. Create a file with any name in root directory
--> touch demo_file.txt
Output--> root@9e0125895039:/# ls
	  bin  boot  demo_file.txt  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

28. Install software of your choice in ubuntu container using "apt-get install"
--> sudo apt update
--> sudo apt-get install nano

29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.
--> root@9e0125895039:/# exit
    exit

30. Check if the ubuntu container is running.
--> docker ps
Output--> CONTAINER ID   IMAGE      COMMAND             CREATED      STATUS         PORTS      NAMES
	  0c73b2e15701   tomcat:7   "catalina.sh run"   3 days ago   Up 6 seconds   8080/tcp   crazy_torvalds

31. Create a new ubuntu container out of the same image as that previous container in attached mode.
--> docker run -it ubuntu:16.04

32. Login as a root user
--> docker exec -it 782a2d78d7dc bash
Output--> root@782a2d78d7dc:/# whoami
	  root

33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.
--> docker kill 6ca8dd4d7ece
Output--> 6ca8dd4d7ece

34. Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.
--> I have the previous ubuntu container.

35. Create an Image out of the existing container.
--> docker run --name myubuntu ubuntu:16.04

36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.
--> docker run -it  myubuntu bash
    root@17017c0adb99:/# login
    root@17017c0adb99:/# ls 

37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.
--> docker stop 0c73b2e15701
--> docker kill 0c73b2e15701
Output--> Error response from daemon: Cannot kill container: 0c73b2e15701: Container 0c73b2e1570142f05cfe57f4f6656d8a3245257a720158d32f7c12c6b549dd97 is not running

38. Create an index.html file with following code in it:-
	<h1>This is Tomcat Container</h1>
Now, Start a tomcat container in such a way that on hitting its URL for home page it should show the above html page.
--> docker run -d -p 8888:8080 tomcat:7.0.90
    docker exec -it 4625262ae353 bash
Output--> root@4625262ae353:/usr/local/tomcat# cd webapps
	  root@4625262ae353:/usr/local/tomcat/webapps# cd ROOT
	  root@4625262ae353:/usr/local/tomcat/webapps/ROOT# echo "<h1>This is Tomcat Container</h1>" >index.html
          root@4625262ae353:/usr/local/tomcat/webapps/ROOT# cat index.html
	  <h1>This is Tomcat Container</h1>

39. type below command:-
	docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a
2. -f
3. -q

write atleast 1 command using each option above and prove their concepts as described in the --help.
--> docker images -a              // [-a, --all             Show all images (default hides intermediate images) ]
    docker images -f --no-trunc   // [--no-trunc        Don't truncate output ]
    docker images -q              // [-q, --quiet           Only show image IDs ]


40. type below command:-
	docker ps --help
Now, try to run command that proves the concept of following six options:-
1. -a
2. -f
3. -q
4. -n
5. -l
6. -s

write atleast 1 command using each option above and prove their concepts as described in the --help.
--> docker ps -a                      // [ -a, --all             Show all containers (default shows just running) ]
    docker ps --filter "name=ubuntu"  // [ -f, --filter filter   Filter output based on conditions provided
    docker ps -q                      // [ -q, --quiet           Only display container IDs ]
    docker ps -n                      // [ --last int            Show n last created containers (includes all states) (default -1) ]
    docker ps -l                      // [ -l, --latest          Show the latest created container (includes all states) ]
    docker ps -s                      // [ -s, --size            Display total file sizes ]


41. Type below command:-
	docker --help

you will various sections of commands apart from options like "Managemnet Commands" and "Commands".


Write some texts below describing the use of "Management Commands".
--> Management commands contains commands that are provided for managing of docker.


Use each command mentioned below and prove its concepts as described in the --help desription. write what you have understood from the output of the command after its successful execution.
1. cp
2. create
3. export
4. history
5. info
6. login
7. logout
8. rename
9. save
10. stats
11. top

--> docker create -t -i ubuntu bash  // [ Create a new container ]
    docker history ubuntu            // [ Show the history of an image ]
    docker info                      // [ Display system-wide information ]
    docker login localhost:8080      // [ Log in to a Docker registry ]
    docker logout localhost:8080     // [ Log out from a Docker registry ]
    docker rename ubuntu_1 my_ubuntu // [ Rename a container ]
    docker save my_ubuntu            // [ Save one or more images to a tar archive (streamed to STDOUT by default) ]
    docker stats                     // [ Display a live stream of container(s) resource usage statistics ]
    docker top container             // [ Display the running processes of a container ]

42. Kill all running container in one liner command.
--> docker container kill $(docker ps -q)

43. Delete all images in one liner command.
--> docker rmi $(docker images -a -q)

44. Create a simple Dockerfile, build it and run it.
--> create Dockerfile without any extention
--> docker build -t myfirstimage

45. Create one or more Dockerfile that demostrate the following commands in Dockerfile (Write a PoC for each in one or more Dockerfile)
	1. USER
	2. RUN
	3. ENV
	4. CMD
	5. RUN
	6. ENTRYPOINT
	7. EXPOSE
	8. VOLUME
--> docker run it ubuntu bash
	mkdir dockerfile
	cd dockerfile
	vi dockerfile  //edit file

     FROM ubuntu
     MAINTAINER priyanka raikar <priyankaraikar@gmail.com>
     RUN apt-get update
     ENV xyz=Welcome
     EXPOSE 90/udp
     ENTRYPOINT ["top","-b"]
     CMD ["echo","Welcome this is my new Dockerfile"]
     VOLUME /myvol
     RUN dir C:\

--> docker build -t ubuntu
-->docker run ubuntu
	
46. Dockerhub:-
	Find a application you care about on docker hub.
	Launch the container.
	Install another application in it.
	Save (commit) the image.
	Upload that to docker hub in your account and share it with a colleague, ask them to use your image and run the container out of it in their machine/vm.
--> docker pull ubuntu
--> docker run -it --name mynginx ubuntu
--> root@09ac1979c46c:/# which nginx
	root@09ac1979c46c:/# apt-get update
	root@09ac1979c46c:/# apt-get install nginx
        root@09ac1979c46c:/# which nginx
        root@09ac1979c46c:/# apt-get install curl
        root@09ac1979c46c:/# service nginx start
        root@09ac1979c46c:/# curl http://localhost:80
        root@09ac1979c46c:/# exit
--> docker commit mynginx priyankaraikar/my_nginx
--> docker images 
--> docker login 
--> docker push priyankaraikar/my_nginx
