Create Ghost module
Create a directory called ghost.
Your modules will be made up of three files: main.tf, variables.tf and outputs.tf.

main.tf
In main.tf you will deploy out two resources docker_image and docker_container. The docker_image resource name will be ghost_image.
The name will use th image_name variable.
The docker_container resource name will be ghost_container.
The name will be set using a varialbe called container_name. The image will be set usingdocker_image.ghost_image.latest. Set the external port to use the ext_port variable.

variables.tf
In variables.tf create three varialbes: image_name, container_name and ext_port.

outputs.tf
In outputs.tf create two outputs: ip and container_name. The ip output the ghost_container's ip_address attribute.
The container_name output the ghost_container's name attribute.

Create root module
main.tf
In cloud_user directory create main.tf, variables.tf and outputs.tf. In main.tf will use the ghost module.
Set image_name using a variable called image_name.
Set container_name using a variable called container_name.
Set ext_port using a variable called ext_port.
In variables.tf create three image_name, container_name and ext_port.

variables.tf
The image_name will have a default value of ghost:latest with a description of Image for container.
The container_name will have a default value of blogwith a description ofName of the container.  
Theext_portwill have adefaultvalue of 80 with a description of External port for container.

outputs.tf
In outputs.tf create two outputs: ip and container_name. The ip output the ghost_container's ip_address attribute.
The container_name output the ghost_container's name attribute.

Deploy the infrastructure
Initialize Terraform.
Generate a Terraform plan and output a plan file.
Deploy the infrastructure using the plan file.

Answer

1)  mkdir -p modules/ghost
	$ cd ghost
	$ touch main.tf variables.tf outputs.tf

//main.tf
terraform {
        required_providers {
        docker = {
                source = "kreuzwerker/docker"
                version = "2.12.0"
                }
        }
}

provider "docker" {
        host = "npipe:////.//pipe//docker_engine"
}

resource "docker_image" "ghost_image" {
        name = "${var.image_name}"
}
#Container
resource "docker_container" "ghost_container" {
        name  = "${var.container_name}"
        image = "${docker_image.ghost_image.latest}"
        ports {
                internal = "2638"
                external = "${var.ext_port}"
        }
}

//Variables.tf

variable "image_name" {}
variable "container_name" {}
variable "ext_port" {}

//Outputs.tf

#Output the IP Address of the Container
output "ip" {
  value = "${docker_container.ghost_container.ip_address}"
}

output "container_name" {
  value = "${docker_container.ghost_container.name}"
}

2) $ cd modules
$ touch main.tf variables.tf outputs.tf

//main.tf
module "ghost" {
  source = "./ghost"
  image_name  = "${var.image_name}"
  container_name = "${var.container_name}"
  ext_port = "${var.ext_port}"
}

//variables.tf
#Define variables
variable "container_name" {
  description = "Name of the container."
  default     = "blog"
}

variable "image_name" {
  description = "Image for container."
  default     = "ghost:latest"
}

variable "ext_port" {
  description = "External port for container."
  default     = "80"
}

//variables.tf
#Output the IP Address of the Container
output "ip" {
  value = "${module.ghost.ip}"
}

output "container_name" {
  value = "${module.ghost.container_name}"
}

3) terraform init
//Terraform has been successfully initialized!

4) terraform plan -out=tfplan

5) terraform apply tfplan
module.ghost.docker_image.ghost_image: Creating...
module.ghost.docker_image.ghost_image: Creation complete after 0s [id=sha256:c908524b592085e0095db3208cef17112d13eb6c5a56d870b576c79fa26e6032ghost:latest]
module.ghost.docker_container.ghost_container: Creating...
module.ghost.docker_container.ghost_container: Still creating... [10s elapsed]
module.ghost.docker_container.ghost_container: Still creating... [20s elapsed]
module.ghost.docker_container.ghost_container: Creation complete after 24s [id=c8b3278759d1b829c99fb9e572cca6cb09ae4e6655dc4d97193eded24f6241cf]
Releasing state lock. This may take a few moments...

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

Outputs:

container_name = "blog"
ip = "172.17.0.2"






	
	